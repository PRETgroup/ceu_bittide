native/pre do
    #include "buff_fifo.c"
end
native/plain
    _BuffQueue,
    _buff_make_queue,
    _buff_queue_read,
    _buff_queue_write,
    _buff_queue_peek,
    _BittideFrame,
    _create_empty_bittide_frame,
    _get_buffer_occupancy_pcnt,
;

code/call ReadQueue(var& _BuffQueue bq)->_BittideFrame do
        var _BuffQueue&& qPtr = &&bq;
        var _BittideFrame l;
        do
            l = _buff_queue_read(qPtr);
        finalize (qPtr) with
        end
        escape l;
end
code/call WriteQueue(var& _BuffQueue bq, var _BittideFrame bf)->int do
    var _BuffQueue&& qPtr = &&bq;
    var int status;
    do
        status = _buff_queue_write(qPtr,bf);
    finalize (qPtr) with
    end
    escape status;
end
code/call GetOccupancyPcnt(var& _BuffQueue bq)->_double do
    var _BuffQueue&& qPtr = &&bq;
    var _double pcnt;
    do
        pcnt = _get_buffer_occupancy_pcnt(qPtr);
    finalize (qPtr) with
    end
    escape pcnt;
end

//synchronous logic
code/await Buffer(var int size, event& none clk, var int sourceId, var int destId)
->(event none send, var _BittideFrame sendData, event none receive, var _BittideFrame receiveData,var _BuffQueue buff)
-> NEVER do
    buff = _buff_make_queue(size); //defaults to 50% occupancy
    sendData = _create_empty_bittide_frame();
    receiveData = _create_empty_bittide_frame();
    par/and do
        every clk do
            sendData = call ReadQueue(&buff);
            _printf("Buffer %d->%d send event!\n", sourceId, destId);
            _printf("Buffer %d->%d occupancy: %.4lf\n", sourceId, destId, call GetOccupancyPcnt(&buff));
            emit send;
        end
    with
        loop do
            await receive; //receive data should be placed in var before this is emitted (unfortunately abstract types can not be values in signals)
            _printf("Buffer %d->%d detected receive event!\n",sourceId, destId);
            call WriteQueue(&buff, receiveData);
            _printf("Buffer %d->%d occupancy: %.4lf\n", sourceId, destId, call GetOccupancyPcnt(&buff));
        end
    end

    await FOREVER;
end