#include "c.ceu"

native/plain _double;
native/pure _get_next_time;
native/const _DBL_MAX;
native/const _NUM_ITERATIONS;
#include "node.ceu"
native/pre do 
    static const int NUM_ITERATIONS = 1000;
    #include <float.h>
end

pool[] NodeProcess all_processes;
event _double time_delta; //simulate time passing in real world
var _double global_time = 0;
var int num_nodes = 2;
//create nodes
spawn NodeProcess(num_nodes, 1000.0, &time_delta,0) in all_processes;
spawn NodeProcess(num_nodes, 2000.0, &time_delta,1) in all_processes;

//
loop _ in [0->_NUM_ITERATIONS] do
    var&? NodeProcess proc_it;

    //find the lowest next scheduled time
    var _double next_clock_tick = _DBL_MAX;

    loop proc_it in all_processes do
        var& NodeProcess my_proc = &proc_it!;
        //_printf("Node with id %d has next clock tick at %lf\n", my_proc.id, my_proc.next_clock_tick_time);
        if (my_proc.next_clock_tick_time < next_clock_tick) then
            next_clock_tick = my_proc.next_clock_tick_time;
        end
    end
    global_time = next_clock_tick;
    emit time_delta(global_time);

    _printf("Global time is now: %lf\n", global_time);
end
escape 0;
